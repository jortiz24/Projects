class Solution:
    def strongPasswordChecker(self, password: str) -> int:

  
        if len(password) < 4:
            return 6-len(password)
        

            
        out = 0
        breaks = 0
        excess = 0
        
        if len(password) > 20:
            print(len(password))
            excess += len(password) - 20

        
        
        
        position = 0
        counter = 1
        check = password[position]
        repeats = []

        while position < len(password) - 2:

            if check == password[position+counter]:
                
                if position + counter >= len(password) - 1:
                    counter += 1
                    if counter > 2:
                        repeats += [counter]
                    
                    breaks += (counter)//3
                    break
                else:
                    counter += 1
                
            else:
                if counter > 2:
                        repeats += [counter]
                breaks += (counter)//3
                position += counter
                check = password[position]
                counter = 1
        
        

        
        
        if any(num in "0123456789" for num in password) == False:
                
            out += 1
        if password.isupper() == True:
            out += 1
        elif password.islower() == True:
            out += 1
        elif password.upper() == password.lower():
              out += 2
        elif len(password) + out < 6:
             out+= 6 - len(password) + out 


        print(repeats)
        counter = 0
        sub = excess
       
        while sub > 0 and breaks > 0:
            print(breaks,sub)
            if counter < 2:
                for x in range(len(repeats)):
                    if repeats[x] % 3 == counter % 3 and sub - (counter % 3 + 1) >= 0:
                        repeats[x] -= counter % 3 + 1
                        sub -=  counter % 3 + 1
                        breaks -= 1
                        
                counter += 1

            else:
                breaks = breaks - sub//3
                sub = 0

            
        
        if breaks >= out:
            return breaks + excess
        else:
            return out + excess

        
